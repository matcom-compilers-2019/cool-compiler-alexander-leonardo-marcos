
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTARROW ASSIGN AT BOOLEAN CASE CLASS COLON COMMA DIVIDE DOT ELSE EQ ESAC FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SELF SEMICOLON STRING THEN TYPE WHILE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n        expression : let_expression\n        \n        let_expression : LET declaration_list IN expression\n        \n        declaration_list : declaration_list COMMA declaration\n                         | declaration\n        \n        declaration : ID COLON TYPE ASSIGN expression\n                    | ID COLON TYPE\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,6,8,],[4,4,-3,-2,]),'$end':([1,2,6,8,],[0,-1,-3,-2,]),'SEMICOLON':([3,5,14,17,18,28,35,40,41,42,43,44,45,50,71,76,77,78,79,85,92,93,94,95,96,97,98,99,100,102,110,111,121,124,129,130,134,140,142,143,],[6,8,19,-4,23,-13,-5,-17,-12,-18,-19,-20,-21,-43,101,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,115,-40,-11,-32,-44,-10,-42,-49,-26,-41,-31,144,]),'TYPE':([4,10,21,30,33,37,52,62,108,132,],[7,16,28,36,39,57,76,91,123,137,]),'LBRACE':([7,16,34,39,46,47,48,49,51,53,54,55,57,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[9,22,46,58,46,46,46,46,46,46,46,46,83,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,46,46,46,46,-23,46,46,46,46,]),'INHERITS':([7,],[10,]),'RBRACE':([9,11,12,13,19,22,23,29,40,42,43,44,45,50,70,76,77,78,79,84,85,92,93,94,95,96,97,98,99,101,102,109,111,115,121,129,130,134,140,142,],[-57,17,-6,-7,-9,-57,-8,35,-17,-18,-19,-20,-21,-43,99,-53,-54,-55,-56,110,-25,-33,-34,-35,-36,-37,-38,-39,-22,-24,-40,124,-32,-23,-44,-42,-49,-26,-41,-31,]),'ID':([9,12,19,20,22,23,32,34,46,47,48,49,51,53,54,55,56,58,59,60,61,63,64,65,66,67,68,69,70,83,101,103,104,105,106,107,112,113,114,115,118,119,128,131,133,135,141,144,],[15,15,-9,24,15,-8,24,40,40,40,40,40,40,40,40,40,82,40,40,40,90,40,40,40,40,40,40,40,40,40,-24,40,40,120,40,82,40,40,127,-23,120,-51,40,-50,40,40,40,-52,]),'LPAREN':([15,34,40,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,90,101,103,104,106,112,113,115,127,128,133,135,141,],[20,47,60,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,113,-24,47,47,47,47,47,-23,135,47,47,47,47,]),'COLON':([15,24,26,31,82,120,],[21,30,33,37,108,132,]),'RPAREN':([20,25,27,36,38,40,42,43,44,45,50,60,72,76,77,78,79,85,86,87,88,89,92,93,94,95,96,97,98,99,102,111,113,121,125,126,129,130,134,135,139,140,142,],[26,31,-15,-16,-14,-17,-18,-19,-20,-21,-43,-57,102,-53,-54,-55,-56,-25,111,-27,-28,-30,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-57,-44,-29,134,-42,-49,-26,-57,142,-41,-31,]),'COMMA':([25,27,36,38,40,42,43,44,45,50,76,77,78,79,80,81,85,87,89,92,93,94,95,96,97,98,99,102,111,121,122,123,125,129,130,134,138,140,142,],[32,-15,-16,-14,-17,-18,-19,-20,-21,-43,-53,-54,-55,-56,107,-46,-25,112,-30,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-45,-48,-29,-42,-49,-26,-47,-41,-31,]),'ASSIGN':([28,40,123,],[34,59,133,]),'INTEGER':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-24,42,42,42,42,42,-23,42,42,42,42,]),'BOOLEAN':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,43,43,43,43,-23,43,43,43,43,]),'STRING':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,44,44,-23,44,44,44,44,]),'SELF':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,45,45,45,45,45,-23,45,45,45,45,]),'IF':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,48,48,48,48,48,-23,48,48,48,48,]),'WHILE':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-24,49,49,49,49,49,-23,49,49,49,49,]),'CASE':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,51,51,51,51,-23,51,51,51,51,]),'NEW':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,52,52,52,52,-23,52,52,52,52,]),'ISVOID':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-24,53,53,53,53,53,-23,53,53,53,53,]),'INT_COMP':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-24,54,54,54,54,54,-23,54,54,54,54,]),'NOT':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-24,55,55,55,55,55,-23,55,55,55,55,]),'LET':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,101,103,104,106,112,113,115,128,133,135,141,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-24,56,56,56,56,56,-23,56,56,56,56,]),'DOT':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,91,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,61,-18,-19,-20,-21,-43,61,61,61,61,61,-53,61,61,61,61,61,61,114,61,61,61,61,61,61,61,-22,61,-40,61,-32,61,61,61,61,-42,-49,-26,61,61,-41,-31,61,]),'AT':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,62,-18,-19,-20,-21,-43,62,62,62,62,62,-53,62,62,62,62,62,62,62,62,62,62,62,62,62,-22,62,-40,62,-32,62,62,62,62,-42,-49,-26,62,62,-41,-31,62,]),'PLUS':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,63,-18,-19,-20,-21,-43,63,63,63,63,63,-53,-54,-55,63,63,63,63,-33,-34,-35,-36,63,63,63,-22,63,-40,63,-32,63,63,63,63,-42,-49,-26,63,63,-41,-31,63,]),'MINUS':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,64,-18,-19,-20,-21,-43,64,64,64,64,64,-53,-54,-55,64,64,64,64,-33,-34,-35,-36,64,64,64,-22,64,-40,64,-32,64,64,64,64,-42,-49,-26,64,64,-41,-31,64,]),'MULTIPLY':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,65,-18,-19,-20,-21,-43,65,65,65,65,65,-53,-54,-55,65,65,65,65,65,65,-35,-36,65,65,65,-22,65,-40,65,-32,65,65,65,65,-42,-49,-26,65,65,-41,-31,65,]),'DIVIDE':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,66,-18,-19,-20,-21,-43,66,66,66,66,66,-53,-54,-55,66,66,66,66,66,66,-35,-36,66,66,66,-22,66,-40,66,-32,66,66,66,66,-42,-49,-26,66,66,-41,-31,66,]),'LT':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,67,-18,-19,-20,-21,-43,67,67,67,67,67,-53,-54,-55,67,67,67,67,-33,-34,-35,-36,None,None,None,-22,67,-40,67,-32,67,67,67,67,-42,-49,-26,67,67,-41,-31,67,]),'LTEQ':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,68,-18,-19,-20,-21,-43,68,68,68,68,68,-53,-54,-55,68,68,68,68,-33,-34,-35,-36,None,None,None,-22,68,-40,68,-32,68,68,68,68,-42,-49,-26,68,68,-41,-31,68,]),'EQ':([40,41,42,43,44,45,50,71,72,73,74,75,76,77,78,79,84,85,89,92,93,94,95,96,97,98,99,100,102,109,111,116,117,121,125,129,130,134,136,138,140,142,143,],[-17,69,-18,-19,-20,-21,-43,69,69,69,69,69,-53,-54,-55,69,69,69,69,-33,-34,-35,-36,None,None,None,-22,69,-40,69,-32,69,69,69,69,-42,-49,-26,69,69,-41,-31,69,]),'THEN':([40,42,43,44,45,50,73,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,121,129,130,134,140,142,],[-17,-18,-19,-20,-21,-43,103,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-42,-49,-26,-41,-31,]),'LOOP':([40,42,43,44,45,50,74,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,121,129,130,134,140,142,],[-17,-18,-19,-20,-21,-43,104,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-42,-49,-26,-41,-31,]),'OF':([40,42,43,44,45,50,75,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,121,129,130,134,140,142,],[-17,-18,-19,-20,-21,-43,105,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-42,-49,-26,-41,-31,]),'ELSE':([40,42,43,44,45,50,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,116,121,129,130,134,140,142,],[-17,-18,-19,-20,-21,-43,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,128,-44,-42,-49,-26,-41,-31,]),'POOL':([40,42,43,44,45,50,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,117,121,129,130,134,140,142,],[-17,-18,-19,-20,-21,-43,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,129,-44,-42,-49,-26,-41,-31,]),'FI':([40,42,43,44,45,50,76,77,78,79,85,92,93,94,95,96,97,98,99,102,111,121,129,130,134,136,140,142,],[-17,-18,-19,-20,-21,-43,-53,-54,-55,-56,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-42,-49,-26,140,-41,-31,]),'IN':([40,42,43,44,45,50,76,77,78,79,80,81,85,92,93,94,95,96,97,98,99,102,111,121,122,123,129,130,134,138,140,142,],[-17,-18,-19,-20,-21,-43,-53,-54,-55,-56,106,-46,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-44,-45,-48,-42,-49,-26,-47,-41,-31,]),'ESAC':([118,119,131,144,],[130,-51,-50,-52,]),'ARROW':([137,],[141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'features_list_opt':([9,22,],[11,29,]),'features_list':([9,22,],[12,12,]),'empty':([9,22,60,113,135,],[13,13,88,88,88,]),'feature':([9,12,22,],[14,18,14,]),'formal_params_list':([20,],[25,]),'formal_param':([20,32,],[27,38,]),'expression':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,103,104,106,112,113,128,133,135,141,],[41,71,72,73,74,75,77,78,79,84,85,89,92,93,94,95,96,97,98,100,109,116,117,121,125,89,136,138,89,143,]),'let_expression':([34,46,47,48,49,51,53,54,55,58,59,60,63,64,65,66,67,68,69,70,83,103,104,106,112,113,128,133,135,141,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'block_list':([46,],[70,]),'declaration_list':([56,],[80,]),'declaration':([56,107,],[81,122,]),'arguments_list_opt':([60,113,135,],[86,126,139,]),'arguments_list':([60,113,135,],[87,87,87,]),'actions_list':([105,],[118,]),'action':([105,118,],[119,131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','cooljack.py',34),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','cooljack.py',40),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','cooljack.py',41),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','cooljack.py',50),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','cooljack.py',56),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','cooljack.py',62),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','cooljack.py',63),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','cooljack.py',69),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','cooljack.py',70),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','cooljack.py',79),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','cooljack.py',85),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','cooljack.py',91),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','cooljack.py',97),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','cooljack.py',103),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','cooljack.py',104),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','cooljack.py',113),
  ('expression -> ID','expression',1,'p_expression_object_identifier','cooljack.py',119),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','cooljack.py',125),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','cooljack.py',131),
  ('expression -> STRING','expression',1,'p_expression_string_constant','cooljack.py',137),
  ('expression -> SELF','expression',1,'p_expr_self','cooljack.py',143),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','cooljack.py',149),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','cooljack.py',155),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','cooljack.py',156),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','cooljack.py',165),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','cooljack.py',173),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','cooljack.py',179),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','cooljack.py',180),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','cooljack.py',186),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','cooljack.py',187),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','cooljack.py',196),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','cooljack.py',202),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','cooljack.py',210),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','cooljack.py',211),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','cooljack.py',212),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','cooljack.py',213),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','cooljack.py',226),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','cooljack.py',227),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','cooljack.py',228),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','cooljack.py',239),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','cooljack.py',247),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','cooljack.py',253),
  ('expression -> let_expression','expression',1,'p_expression_let','cooljack.py',261),
  ('let_expression -> LET declaration_list IN expression','let_expression',4,'p_let','cooljack.py',267),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','cooljack.py',273),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cooljack.py',274),
  ('declaration -> ID COLON TYPE ASSIGN expression','declaration',5,'p_declaration','cooljack.py',283),
  ('declaration -> ID COLON TYPE','declaration',3,'p_declaration','cooljack.py',284),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','cooljack.py',295),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','cooljack.py',301),
  ('actions_list -> action','actions_list',1,'p_actions_list','cooljack.py',302),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','cooljack.py',311),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','cooljack.py',319),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','cooljack.py',325),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','cooljack.py',331),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','cooljack.py',337),
  ('empty -> <empty>','empty',0,'p_empty','cooljack.py',345),
]
